//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calculator.MathService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMathService")]
    public interface IMathService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
        int Add(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Substract", ReplyAction="http://tempuri.org/IMathService/SubstractResponse")]
        int Substract(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Substract", ReplyAction="http://tempuri.org/IMathService/SubstractResponse")]
        System.Threading.Tasks.Task<int> SubstractAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Division", ReplyAction="http://tempuri.org/IMathService/DivisionResponse")]
        int Division(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Division", ReplyAction="http://tempuri.org/IMathService/DivisionResponse")]
        System.Threading.Tasks.Task<int> DivisionAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Multiplication", ReplyAction="http://tempuri.org/IMathService/MultiplicationResponse")]
        int Multiplication(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Multiplication", ReplyAction="http://tempuri.org/IMathService/MultiplicationResponse")]
        System.Threading.Tasks.Task<int> MultiplicationAsync(int num1, int num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathServiceChannel : Calculator.MathService.IMathService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathServiceClient : System.ServiceModel.ClientBase<Calculator.MathService.IMathService>, Calculator.MathService.IMathService {
        
        public MathServiceClient() {
        }
        
        public MathServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int num1, int num2) {
            return base.Channel.Add(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int num1, int num2) {
            return base.Channel.AddAsync(num1, num2);
        }
        
        public int Substract(int num1, int num2) {
            return base.Channel.Substract(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> SubstractAsync(int num1, int num2) {
            return base.Channel.SubstractAsync(num1, num2);
        }
        
        public int Division(int num1, int num2) {
            return base.Channel.Division(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> DivisionAsync(int num1, int num2) {
            return base.Channel.DivisionAsync(num1, num2);
        }
        
        public int Multiplication(int num1, int num2) {
            return base.Channel.Multiplication(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> MultiplicationAsync(int num1, int num2) {
            return base.Channel.MultiplicationAsync(num1, num2);
        }
    }
}
